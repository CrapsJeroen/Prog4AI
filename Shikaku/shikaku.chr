:- use_module(library(chr)).
:- use_module(library(lists)).
:- include(puzzles).
:- include(print).
:- chr_constraint search/1, point/3, solve/1, nrRect/1, rect/3, rect_temp/3, makeDomains/1, dom/2.



solve(Name) <=> 
        problem(Name,Width,Height,Ps),
        length(Ps,N),
        nrRect(N), 
        dom(Width,Height), 
        makeDomains(Ps),
        search(1),
        show(Width, Height, Ps, chr), !, fail.


makeDomains([]) <=> true.
dom(W,H) \ makeDomains([(I,J,V)|Ps]) <=>
  X1 is max(1,I-V+1), X2 is I, fromTo(X1,X2,Xs),
  Y1 is max(1,J-V+1), Y2 is J, fromTo(Y1,Y2,Ys)
  | generateSizes(W,H,V,Ss), rect_temp(c(I,J),c(Xs,Ys),Ss), makeDomains(Ps).


%FAILURE
failureX @ rect_temp(_,c([],_),_) <=> fail.
failureY @ rect_temp(_,c(_,[]),_) <=> fail.
failureS @ rect_temp(_,_,[]) <=> fail.

%Contains no other points
/*
above @ point(I,J,_) \ rect_temp(c(I2,J),c(Xs,Ys),Ss) <=> I < I2, upTo(I,L), subtract(Xs,L,NL), Xs \== NL | rect_temp(c(I2,J),c(NL,Ys),Ss).
left @  point(I,J,_) \ rect_temp(c(I,J2),c(Xs,Ys),Ss) <=> J < J2, upTo(J,L), subtract(Ys,L,NL), Ys \== NL | rect_temp(c(I,J2),c(Xs,NL),Ss).
*/

%Finalise rectangle
rect_temp(c(I,J),c([X],[Y]),[S]) <=> rect(c(I,J),c(X,Y),S).


notinsideX @ rect(c(I,_),c(X,_),s(W,_)) <=> 
        XL is X+W-1, I > XL | fail.
notinsideY @ rect(c(_,J),c(_,Y),s(_,H)) <=> 
        YL is Y+H-1, J > YL | fail.


outsideDomWidth @ dom(Width,_) \ rect(_,c(X,_),s(W,_)) <=> 
        X2 is X+W-1,
        X2 > Width | fail.
outsideDomHeight @ dom(_,Height) \ rect(_,c(_,Y),s(_,H)) <=> 
        Y2 is Y+H-1,
        Y2 > Height | fail.

overlaps @ rect(_,c(XA,YA),s(WA,HA)), rect(_,c(XB,YB),s(WB,HB)) <=>
            XA2 is XA+WA-1, XB2 is XB+WB-1,
            YA2 is YA+HA-1, YB2 is YB+HB-1,
            XA =< XB2, XA2 >= XB,
            YA =< YB2, YA2 >= YB | fail.


nrRect(M) \ search(N) <=> N1 is N-1, N1 == M | true.
search(N), rect_temp(c(I,J),c(Xs,Ys),Ss) <=> 
        generateCombinations(Xs,Ys,Ss,L), try_value(c(I,J),L), search(N).
search(N) <=> N1 is N+1, search(N1).
	
try_value(_,[]) :- fail.    
try_value(P,[(X,Y,S)|Vals]):- 
    (
    rect(P,c(X,Y),S)
    ;
    try_value(P,Vals)
    ).

generateCombinations(Xs,Ys,Ss,L):-
        findall((X,Y,S),(member(X,Xs),member(Y,Ys),member(S,Ss)),L).

generateSizes(Width,Height,V,Ss):-
  Ws is min(Width,V),
  Hs is min(Height,V),
  upTo(Ws,Widths),
  upTo(Hs,Heights),
  findall(s(W,H),(member(W,Widths),member(H,Heights), T is W*H, T == V),Ss).

upTo(0,[]).
upTo(N,[N|L]) :- N>0, N1 is N-1, upTo(N1,L).

fromTo(N,N,[N]).
fromTo(M,N,[M|Tail]):-
  M > 0,
  M1 is M+1,
  fromTo(M1,N,Tail).
