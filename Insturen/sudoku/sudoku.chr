:- use_module(library(chr)).
:- use_module(library(lists)).
:- use_module(library(time)).
:- op(700,xfx,'in').
:- [sudex_toledo].
:- chr_constraint solve/1, import/1, import/2, import_row/3, known/3,
    add_known/3, dom/1, options/3, search/1, show/0, clean/0, show/2, remove_option/3, imported/0.

%%% MAIN %%%
	
/*
*	Solve the puzzle with the given Name.
*/	
solve(Name) <=> 
    puzzles(Raw,Name),
    length(Raw,N),
    dom(N),
    import(Raw),
	imported,
	show,
    search(1),
    !,
    show,
	clean.
/*
*	Solve all puzzles and pause inbetween.
*/
solve_all:-
    puzzles(_,Name),
    format(Name), nl,
    time(solve(Name)).
/*
*	Solve all puzzles without pausing.
*/
solve_all_auto:-
	time((solve_all,fail; true)).
    
/*
* 	Show the Sudoku
*/	
show <=> nl, show(1,1).
dom(N) \ show(Row,Col) <=> Col > N | NRow is Row + 1, nl, show(NRow,1).
dom(N) \ show(Row,_) <=> Row > N | true.
known(Row,Col,Val) \ show(Row,Col) <=> format('~10r ',Val), Col1 is Col+1, show(Row,Col1).
show(Row,Col) <=> format('. '), Col1 is Col+1, show(Row,Col1).

/*
* 	Clean up CHR constraints
*/
clean \ known(_,_,_) <=> true.
clean, dom(_), imported <=> true.

/*
* 	Import the Sudoku puzzle
*/
import(Raw) <=> import(Raw,1).
import([],_) <=> true.
import([CRow|Rows],Y) <=>
    import_row(CRow,Y,1), Y1 is Y + 1 ,import(Rows,Y1).
import_row([],_,_) <=> true.
import_row([CVal|Vals],Y,X) <=> 
    nonvar(CVal) | add_known(Y,X,CVal), X1 is X + 1, import_row(Vals,Y,X1).
dom(N) \ import_row([CVal|Vals],Y,X) <=>
    var(CVal) | upto(N,L), options(Y,X,L), X1 is X + 1, import_row(Vals,Y,X1). 
      

%%% CONSTRAINTS %%%

/*
* 	Every time a new field is filled, generate constraints based on that,
* 	apply those constraints to the remaining options.
* 	Fail if a constraint conflicts with a filled value or if a field has no
*	options left.
*/	  
dom(N) \ add_known(Row,Col,Val)<=>  generate_constraints(Row,Col,Val,N), known(Row,Col,Val).

imported \  remove_option(Row,Col,Val), options(Row,Col,L) <=> delete(L,Val,NL), options(Row,Col,NL). 
imported, known(Row,Col,Val)\ remove_option(Row,Col,Val) <=>  fail.
imported, known(Row,Col,Val)\ remove_option(Row,Col,Val2) <=>  Val \== Val2 | true.
options(_,_,[]) <=> fail.
options(Row,Col,[Val]) <=> add_known(Row,Col,Val).

/*
*	Generate the constraints caused by filling in Value in the field where Row
*	and Col intersect. Do that for the fields in the same block, column and row
*	and apply those constraints afterwards by removing options.
*/
generate_constraints(Row, Col, Val, N) :- 
	findall(const(Row2,Col2,Val), in_same_block(Row,Col,Row2,Col2,N),L1),
	findall(const(OtherRow,Col,Val), in_same_line(Row,OtherRow,N), L2),
	findall(const(Row,OtherCol,Val), in_same_line(Col,OtherCol,N),L3),
	flatten([L1,L2,L3],LR), apply_constraints(LR).
apply_constraints([]).
apply_constraints([const(Row,Col,Val)|Rest]):- remove_option(Row,Col,Val), apply_constraints(Rest).



%%% SEARCH %%%

/*
*	Search based on first-fail: Try to fill in values starting at the fields 
*	with the least options left.
*/
dom(M) \ search(N) <=> N1 is N-1, N1 == M | true.
search(N), options(Col, Row, Vals) <=> length(Vals,X), X =< N | try_value(Col, Row, Vals), search(N).
search(N) <=> N1 is N+1, search(N1).

try_value(_,_,[]) :- fail.    
try_value(Col, Row, [Val|Vals]):-
    (
    add_known(Col,Row,Val)
    ;
    try_value(Col,Row,Vals)
    ).

	
%%% HELPER PREDICATES %%%

/*
* 	Generate two Row/Col pairs within the same block. If on pair is given, all
* 	other fields in the same block are generated.
*/
in_same_block(Row1,Col1,Row2,Col2,N2) :-
    N is integer(sqrt(N2)),
	upto(N,L),
	member(Row1,L), member(Col1,L),
	member(Row2,L), member(Col2,L),
    RowB1 is (Row1 - 1)// N,
    ColB1 is (Col1 - 1)// N,
    RowB2 is (Row2 - 1)// N,
    ColB2 is (Col2 - 1)// N,
	\+ (Row1 == Row2, Col1 == Col2),
	RowB1 == RowB2, ColB1 == ColB2.
	
/*
* 	Generate another position than Coord on the same line.
*/	
in_same_line(Coord, OtherCoord,N) :-
	upto(N,L),
	member(Coord,L), member(OtherCoord,L),
	Coord \== OtherCoord.
	
/*
* 	Generate a possible block number
*/	
block_number(X,Dom):-
    upto(Dom,L),
    member(X,L).
	
/*
* 	Generate a list going from 1 to N.
*/
upto(0,[]).
upto(N,[N|L]) :- N>0, N1 is N-1, upto(N1,L).	
	
