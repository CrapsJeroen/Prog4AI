:- use_module(library(chr)).
:- use_module(library(lists)).
:- use_module(library(time)).
:- use_module(library(clpfd)).
:- op(700,xfx,'in').
:- [sudex_toledo].
:- chr_constraint solve/1, import/1, import/2, import_row/3,
    dom/1,search, show/0, clean/0, show/2, row/2,col/2,block/2.
solve(Name) <=> 
    puzzles(Raw,Name),
    length(Raw,N),
    dom(N),
	generate_domains(1,N),	
    import(Raw),
	show,
    flatten(Raw,Sudoku),
	Sudoku ins 1..N,
	labeling([ff],Sudoku),
    !,
    show,
	clean.

	
solveAll:-
    puzzles(_,Name),
    format(Name), nl,
    time(solve(Name)).
	
solveAllAuto:-
	time((solveAll,fail; true)).
    
	
show <=> nl, show(1,1).
dom(N) \ show(Row,Col) <=> Col > N | NRow is Row + 1, nl, show(NRow,1).
dom(N) \ show(Row,_) <=> Row > N | true.
row(Row,Vals) \ show(Row,Col) <=> nth1(Col,Vals,Val), nonvar(Val) | format('~10r ',Val), Col1 is Col+1, show(Row,Col1).
row(Row,Vals) \ show(Row,Col) <=> nth1(Col,Vals,Val), var(Val) | write('. '), Col1 is Col+1, show(Row,Col1).
show(Row,Col) <=> format('. '), Col1 is Col+1, show(Row,Col1).
clean \ col(_,_) <=> true.
clean \ row(_,_) <=> true.
clean \ block(_,_) <=> true.
clean, dom(_) <=> true.

generate_domains(I,N):- I > N .
generate_domains(I,N):-
	length(L1,N), col(I,L1), 
	length(L2,N), block(I,L2), 
	length(L3,N), row(I,L3), 
	I1 is I+1,
	generate_domains(I1,N).

import(Raw) <=> import(Raw,1).
import([],_) <=> true.
import([CRow|Rows],Y) <=>import_row(CRow,Y,1), Y1 is Y + 1 ,import(Rows,Y1).

import_row([],_,_) <=> true.
dom(N), row(Y,RowList), col(X,ColList), block(BlockN,BlockList) \ import_row([CVal|Vals],Y,X) <=>
	in_block(Y,X,BlockN,N), position_in_block(Y,X,PosInBlock,N) |
    nth1(X,RowList,CVal), nth1(Y,ColList,CVal), nth1(PosInBlock, BlockList, CVal),
	X1 is X + 1, import_row(Vals,Y,X1).
	

row(_,L) ==> all_different(L); fail.
col(_,L) ==> all_different(L); fail.
block(_,L) ==> all_different(L); fail.

upto(0,[]).
upto(N,[N|L]) :- N>0, N1 is N-1, upto(N1,L).

in_block(Row,Col,Block,N2):-
    N is integer(sqrt(N2)),
	upto(N2,L2),
	member(Row,L2), member(Col,L2), member(Block,L2),
    RowB is (Row - 1) // N + 1,
    ColB is (Col - 1) // N + 1,
	Block1 is Block - 1,
	BlockRow is div(Block1,N) + 1,
	BlockCol is mod(Block1,N) + 1,
	RowB == BlockRow, ColB == BlockCol.
	
	
position_in_block(Row,Col,Pos,N2):-
    N is integer(sqrt(N2)),
	upto(N2,L2),
	member(Row,L2), member(Col,L2), member(Pos,L2),
	Row1 is Row-1, Col1 is Col-1,
	RowB is mod(Row1,N), ColB is mod(Col1,N),
	Pos is N * RowB + ColB + 1.
