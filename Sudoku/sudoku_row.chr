:- use_module(library(chr)).
:- use_module(library(lists)).
:- op(700,xfx,'in').
:- [sudex_toledo].
:- chr_constraint solve/1, import/1, import/2, import_row/3, option/3, known/3, dom/1, search/0, permutation/1, show/0, show/2, clean/0.

solve(Name) <=>
  puzzles(Puzzle,Name),
  length(Puzzle,N2),
  dom(N2),
  import(Puzzle),
        show,
  search,
  !,
  show,
	clean.


solveAll:-
    puzzles(_,Name),
    write(Name), nl,
    time(solve(Name)).

solveAllAuto:-
	time((solveAll,fail; true)).

show <=> nl, show(1,1).
dom(N) \ show(Row,Col) <=> Col > N | NRow is Row + 1, nl, show(NRow,1).
dom(N) \ show(Row,_) <=> Row > N | true.
known(Row,Col,Val) \ show(Row,Col) <=> format('~10r ',Val), Col1 is Col+1, show(Row,Col1).
show(Row,Col) <=> format('. '), Col1 is Col+1, show(Row,Col1).
clean \ known(_,_,_) <=> true.
clean, dom(_) <=> true.

import(Puzzle) <=> import(Puzzle,1).
import([],_) <=> true.
import([CRow|Rows],Y) <=>
    import_row(CRow,Y,1), Y1 is Y + 1 ,import(Rows,Y1).

import_row([],_,_) <=> true.
import_row([CVal|Vals],Y,X) <=>
    nonvar(CVal) | known(Y,X,CVal), X1 is X + 1, import_row(Vals,Y,X1).

import_row([CVal|Vals],Y,X) <=>
    var(CVal) | upto(9,L), option(Y,X,L), X1 is X + 1, import_row(Vals,Y,X1).

option(X,_,[V]), option(X,_,[V]) <=> fail.
option(_,_,[]) <=> fail.

%% ROW Constraints
known(X,_,V) \ option(X,Y,L) <=> member(V,L) | delete(L,V,NL), option(X,Y,NL).

%% COL Constraints
known(_,Y,V) \ option(X,Y,L) <=> member(V,L) | delete(L,V,NL), option(X,Y,NL).

%% BLOCK Constraints
known(X,Y,V), dom(N2) \ option(X1,Y1,L) <=> member(V,L),
        N is integer(sqrt(N2)),
        XB is (X-1)//N, YB is (Y-1)//N,
        XB is (X1-1)//N, YB is (Y1-1)//N
         | delete(L,V,NL), option(X1,Y1,NL).

option(X,Y,[X1]) <=> known(X,Y,X1).

upto(0,[]).
upto(N,[N|L]) :- N>0, N1 is N-1, upto(N1,L).

%search
option(X,_,_) \ search  <=> permutation(X), search.
search <=> true.

permutation(X) \ option(X,Y,List) <=> enum(X,Y,List).
permutation(_) <=> true.

enum(X,Y,List) :-
  member(V,List),
  (
    known(X,Y,V)
  ;
    delete(List,V,Result),
    option(X,Y,Result)
  ).
